parameters:

    ecentria.api.listener.exception.class:     Ecentria\Libraries\EcentriaRestBundle\EventListener\ExceptionListener
    ecentria.api.listener.response.class:      Ecentria\Libraries\EcentriaRestBundle\EventListener\EmbeddedResponseListener
    ecentria.api.listener.transactional.class: Ecentria\Libraries\EcentriaRestBundle\EventListener\TransactionalListener
    ecentria.api.listener.requester.class:     Ecentria\Libraries\EcentriaRestBundle\EventListener\RequesterListener

    gedmo.listener.timestampable.class:        Gedmo\Timestampable\TimestampableListener

services:

    # Ecentria
    ecentria.api.listener.exception:
        class: '%ecentria.api.listener.exception.class%'
        arguments:
            - '@ecentria.api.transaction.manager'
        tags:
            - { name: kernel.event_listener, event: kernel.exception, method: onKernelException }

    ecentria.api.listener.response:
        class: '%ecentria.api.listener.response.class%'
        arguments:
            - '@ecentria.utils.embedded_manager'
        tags:
            - { name: kernel.event_listener, event: kernel.view, method: onKernelView, priority: 200 }

    ecentria.api.listener.transactional:
        class: '%ecentria.api.listener.transactional.class%'
        tags:
            - { name: kernel.event_subscriber }
        arguments:
            - '@annotation_reader'
            - '@ecentria.api.builder.transaction'
            - '@=service(parameter("ecentria_rest.transaction_storage"))'
            - '@ecentria.api.transaction.manager'
            - '@ecentria.api.transaction.updater'

    ecentria.api.listener.requester:
        class: '%ecentria.api.listener.requester.class%'
        arguments: ['@stof_doctrine_extensions.listener.blameable']
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest, priority: -100 }

    # Gedmo
    gedmo.listener.timestampable:
        class: '%gedmo.listener.timestampable.class%'
        tags:
            - { name: doctrine.event_subscriber, connection: default }
        calls:
            - [ setAnnotationReader, [ '@annotation_reader' ] ]